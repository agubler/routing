(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '../../on', '../../Promise'], factory);
    }
})(function (require, exports) {
    "use strict";
    var on_1 = require('../../on');
    var Promise_1 = require('../../Promise');
    var EventedStreamSource = (function () {
        function EventedStreamSource(target, type) {
            this._target = target;
            if (Array.isArray(type)) {
                this._events = type;
            }
            else {
                this._events = [type];
            }
            this._handles = [];
        }
        EventedStreamSource.prototype.start = function (controller) {
            var _this = this;
            this._controller = controller;
            this._events.forEach(function (eventName) {
                _this._handles.push(on_1.default(_this._target, eventName, _this._handleEvent.bind(_this)));
            });
            return Promise_1.default.resolve();
        };
        EventedStreamSource.prototype.cancel = function (reason) {
            while (this._handles.length) {
                this._handles.shift().destroy();
            }
            return Promise_1.default.resolve();
        };
        EventedStreamSource.prototype._handleEvent = function (event) {
            this._controller.enqueue(event);
        };
        return EventedStreamSource;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = EventedStreamSource;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRlZFN0cmVhbVNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJlYW1zL2FkYXB0ZXJzL0V2ZW50ZWRTdHJlYW1Tb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0lBRUEsbUJBQWlDLFVBQVUsQ0FBQyxDQUFBO0lBQzVDLHdCQUFvQixlQUFlLENBQUMsQ0FBQTtJQU9wQztRQU1DLDZCQUFZLE1BQXdCLEVBQUUsSUFBZ0I7WUFDckQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFFdEIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQVMsSUFBSSxDQUFDO1lBQzNCLENBQUM7WUFDRCxJQUFJLENBQUMsQ0FBQztnQkFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLENBQVEsSUFBSSxDQUFFLENBQUM7WUFDL0IsQ0FBQztZQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLENBQUM7UUFFRCxtQ0FBSyxHQUFMLFVBQU0sVUFBMkM7WUFBakQsaUJBT0M7WUFOQSxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztZQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFNBQWlCO2dCQUN0QyxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFFLENBQU8sS0FBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JGLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLGlCQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDMUIsQ0FBQztRQUVELG9DQUFNLEdBQU4sVUFBTyxNQUFZO1lBQ2xCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNqQyxDQUFDO1lBRUQsTUFBTSxDQUFDLGlCQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDMUIsQ0FBQztRQUVTLDBDQUFZLEdBQXRCLFVBQXVCLEtBQVk7WUFDbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsQ0FBQztRQUNGLDBCQUFDO0lBQUQsQ0FBQyxBQXZDRCxJQXVDQztJQXZDRDt5Q0F1Q0MsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudGVkIGZyb20gJy4uLy4uL0V2ZW50ZWQnO1xuaW1wb3J0IHsgSGFuZGxlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgb24sIHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vLi4vb24nO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnLi4vLi4vUHJvbWlzZSc7XG5pbXBvcnQgeyBTb3VyY2UgfSBmcm9tICcuLi9SZWFkYWJsZVN0cmVhbSc7XG5pbXBvcnQgUmVhZGFibGVTdHJlYW1Db250cm9sbGVyIGZyb20gJy4uL1JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcic7XG5cbmV4cG9ydCB0eXBlIEV2ZW50VGFyZ2V0VHlwZXMgPSBFdmVudGVkIHwgRXZlbnRFbWl0dGVyIHwgRXZlbnRUYXJnZXQ7XG5leHBvcnQgdHlwZSBFdmVudFR5cGVzID0gc3RyaW5nIHwgc3RyaW5nW107XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50ZWRTdHJlYW1Tb3VyY2UgaW1wbGVtZW50cyBTb3VyY2U8RXZlbnQ+IHtcblx0cHJvdGVjdGVkIF9jb250cm9sbGVyOiBSZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXI8RXZlbnQ+O1xuXHRwcm90ZWN0ZWQgX3RhcmdldDogRXZlbnRUYXJnZXRUeXBlcztcblx0cHJvdGVjdGVkIF9ldmVudHM6IHN0cmluZ1tdO1xuXHRwcm90ZWN0ZWQgX2hhbmRsZXM6IEhhbmRsZVtdO1xuXG5cdGNvbnN0cnVjdG9yKHRhcmdldDogRXZlbnRUYXJnZXRUeXBlcywgdHlwZTogRXZlbnRUeXBlcykge1xuXHRcdHRoaXMuX3RhcmdldCA9IHRhcmdldDtcblxuXHRcdGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG5cdFx0XHR0aGlzLl9ldmVudHMgPSA8YW55PiB0eXBlO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMuX2V2ZW50cyA9IFsgPGFueT4gdHlwZSBdO1xuXHRcdH1cblxuXHRcdHRoaXMuX2hhbmRsZXMgPSBbXTtcblx0fVxuXG5cdHN0YXJ0KGNvbnRyb2xsZXI6IFJlYWRhYmxlU3RyZWFtQ29udHJvbGxlcjxFdmVudD4pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0aGlzLl9jb250cm9sbGVyID0gY29udHJvbGxlcjtcblx0XHR0aGlzLl9ldmVudHMuZm9yRWFjaCgoZXZlbnROYW1lOiBzdHJpbmcpID0+IHtcblx0XHRcdHRoaXMuX2hhbmRsZXMucHVzaChvbig8YW55PiB0aGlzLl90YXJnZXQsIGV2ZW50TmFtZSwgdGhpcy5faGFuZGxlRXZlbnQuYmluZCh0aGlzKSkpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXHR9XG5cblx0Y2FuY2VsKHJlYXNvbj86IGFueSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHdoaWxlICh0aGlzLl9oYW5kbGVzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5faGFuZGxlcy5zaGlmdCgpLmRlc3Ryb3koKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2hhbmRsZUV2ZW50KGV2ZW50OiBFdmVudCkge1xuXHRcdHRoaXMuX2NvbnRyb2xsZXIuZW5xdWV1ZShldmVudCk7XG5cdH1cbn1cbiJdfQ==