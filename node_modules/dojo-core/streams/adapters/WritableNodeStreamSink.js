(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '../../Promise'], factory);
    }
})(function (require, exports) {
    "use strict";
    var Promise_1 = require('../../Promise');
    var WritableNodeStreamSink = (function () {
        function WritableNodeStreamSink(nodeStream, encoding) {
            if (encoding === void 0) { encoding = ''; }
            this._isClosed = false;
            this._encoding = encoding;
            this._nodeStream = nodeStream;
            this._onError = this._handleError.bind(this);
            this._nodeStream.on('error', this._onError);
        }
        WritableNodeStreamSink.prototype._handleError = function (error) {
            this._isClosed = true;
            this._removeListeners();
            if (this._rejectWritePromise) {
                this._rejectWritePromise(error);
                this._rejectWritePromise = undefined;
            }
            throw error;
        };
        WritableNodeStreamSink.prototype._removeListeners = function () {
            this._nodeStream.removeListener('error', this._onError);
        };
        WritableNodeStreamSink.prototype.abort = function (reason) {
            // TODO: is there anything else to do here?
            return this.close();
        };
        WritableNodeStreamSink.prototype.close = function () {
            var _this = this;
            this._isClosed = true;
            this._removeListeners();
            return new Promise_1.default(function (resolve, reject) {
                // TODO: if the node stream returns an error from 'end', should we:
                // 1. reject this.close with the error? (implemented)
                // 2. put 'this' into an error state? (this._handleError)
                _this._nodeStream.end(null, null, function (error) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve();
                    }
                });
            });
        };
        WritableNodeStreamSink.prototype.start = function () {
            if (this._isClosed) {
                return Promise_1.default.reject(new Error('Stream is closed'));
            }
            return Promise_1.default.resolve();
        };
        WritableNodeStreamSink.prototype.write = function (chunk) {
            var _this = this;
            if (this._isClosed) {
                return Promise_1.default.reject(new Error('Stream is closed'));
            }
            return new Promise_1.default(function (resolve, reject) {
                _this._rejectWritePromise = reject;
                _this._nodeStream.write(chunk, _this._encoding, function (error) {
                    if (error) {
                        _this._handleError(error);
                    }
                    else {
                        _this._rejectWritePromise = undefined;
                        resolve();
                    }
                });
            });
        };
        return WritableNodeStreamSink;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = WritableNodeStreamSink;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV3JpdGFibGVOb2RlU3RyZWFtU2luay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJlYW1zL2FkYXB0ZXJzL1dyaXRhYmxlTm9kZVN0cmVhbVNpbmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0lBQUEsd0JBQW9CLGVBQWUsQ0FBQyxDQUFBO0lBS3BDO1FBT0MsZ0NBQVksVUFBaUMsRUFBRSxRQUFxQjtZQUFyQix3QkFBcUIsR0FBckIsYUFBcUI7WUFDbkUsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFFdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7WUFDMUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7WUFDOUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFFUyw2Q0FBWSxHQUF0QixVQUF1QixLQUFZO1lBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBRXhCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLFNBQVMsQ0FBQztZQUN0QyxDQUFDO1lBRUQsTUFBTSxLQUFLLENBQUM7UUFDYixDQUFDO1FBRVMsaURBQWdCLEdBQTFCO1lBQ0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBRUQsc0NBQUssR0FBTCxVQUFNLE1BQVc7WUFDaEIsMkNBQTJDO1lBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsQ0FBQztRQUVELHNDQUFLLEdBQUw7WUFBQSxpQkFpQkM7WUFoQkEsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFFeEIsTUFBTSxDQUFDLElBQUksaUJBQU8sQ0FBTyxVQUFDLE9BQU8sRUFBRSxNQUFNO2dCQUN4QyxtRUFBbUU7Z0JBQ25FLHFEQUFxRDtnQkFDckQseURBQXlEO2dCQUN6RCxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQUMsS0FBWTtvQkFDN0MsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFDWCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2YsQ0FBQztvQkFDRCxJQUFJLENBQUMsQ0FBQzt3QkFDTCxPQUFPLEVBQUUsQ0FBQztvQkFDWCxDQUFDO2dCQUNGLENBQUMsQ0FBQyxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDO1FBRUQsc0NBQUssR0FBTDtZQUNDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixNQUFNLENBQUMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1lBQ3RELENBQUM7WUFFRCxNQUFNLENBQUMsaUJBQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQixDQUFDO1FBRUQsc0NBQUssR0FBTCxVQUFNLEtBQWE7WUFBbkIsaUJBa0JDO1lBakJBLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixNQUFNLENBQUMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1lBQ3RELENBQUM7WUFFRCxNQUFNLENBQUMsSUFBSSxpQkFBTyxDQUFPLFVBQUMsT0FBTyxFQUFFLE1BQU07Z0JBQ3hDLEtBQUksQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUM7Z0JBRWxDLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFJLENBQUMsU0FBUyxFQUFFLFVBQUMsS0FBYTtvQkFDM0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFDWCxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUMxQixDQUFDO29CQUNELElBQUksQ0FBQyxDQUFDO3dCQUNMLEtBQUksQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLENBQUM7d0JBQ3JDLE9BQU8sRUFBRSxDQUFDO29CQUNYLENBQUM7Z0JBQ0YsQ0FBQyxDQUFDLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztRQUNKLENBQUM7UUFDRiw2QkFBQztJQUFELENBQUMsQUFuRkQsSUFtRkM7SUFuRkQ7NENBbUZDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvbWlzZSBmcm9tICcuLi8uLi9Qcm9taXNlJztcbmltcG9ydCB7IFNpbmsgfSBmcm9tICcuLi9Xcml0YWJsZVN0cmVhbSc7XG5cbmV4cG9ydCB0eXBlIE5vZGVTb3VyY2VUeXBlID0gQnVmZmVyIHwgc3RyaW5nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXcml0YWJsZU5vZGVTdHJlYW1TaW5rIGltcGxlbWVudHMgU2luazxOb2RlU291cmNlVHlwZT4ge1xuXHRwcm90ZWN0ZWQgX2VuY29kaW5nOiBzdHJpbmc7XG5cdHByb3RlY3RlZCBfaXNDbG9zZWQ6IGJvb2xlYW47XG5cdHByb3RlY3RlZCBfbm9kZVN0cmVhbTogTm9kZUpTLldyaXRhYmxlU3RyZWFtO1xuXHRwcm90ZWN0ZWQgX29uRXJyb3I6IChlcnJvcjogRXJyb3IpID0+IHZvaWQ7XG5cdHByb3RlY3RlZCBfcmVqZWN0V3JpdGVQcm9taXNlOiBGdW5jdGlvbjtcblxuXHRjb25zdHJ1Y3Rvcihub2RlU3RyZWFtOiBOb2RlSlMuV3JpdGFibGVTdHJlYW0sIGVuY29kaW5nOiBzdHJpbmcgPSAnJykge1xuXHRcdHRoaXMuX2lzQ2xvc2VkID0gZmFsc2U7XG5cblx0XHR0aGlzLl9lbmNvZGluZyA9IGVuY29kaW5nO1xuXHRcdHRoaXMuX25vZGVTdHJlYW0gPSBub2RlU3RyZWFtO1xuXHRcdHRoaXMuX29uRXJyb3IgPSB0aGlzLl9oYW5kbGVFcnJvci5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuX25vZGVTdHJlYW0ub24oJ2Vycm9yJywgdGhpcy5fb25FcnJvcik7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2hhbmRsZUVycm9yKGVycm9yOiBFcnJvcik6IHZvaWQge1xuXHRcdHRoaXMuX2lzQ2xvc2VkID0gdHJ1ZTtcblx0XHR0aGlzLl9yZW1vdmVMaXN0ZW5lcnMoKTtcblxuXHRcdGlmICh0aGlzLl9yZWplY3RXcml0ZVByb21pc2UpIHtcblx0XHRcdHRoaXMuX3JlamVjdFdyaXRlUHJvbWlzZShlcnJvcik7XG5cdFx0XHR0aGlzLl9yZWplY3RXcml0ZVByb21pc2UgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX3JlbW92ZUxpc3RlbmVycygpOiB2b2lkIHtcblx0XHR0aGlzLl9ub2RlU3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIHRoaXMuX29uRXJyb3IpO1xuXHR9XG5cblx0YWJvcnQocmVhc29uOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyBUT0RPOiBpcyB0aGVyZSBhbnl0aGluZyBlbHNlIHRvIGRvIGhlcmU/XG5cdFx0cmV0dXJuIHRoaXMuY2xvc2UoKTtcblx0fVxuXG5cdGNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRoaXMuX2lzQ2xvc2VkID0gdHJ1ZTtcblx0XHR0aGlzLl9yZW1vdmVMaXN0ZW5lcnMoKTtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHQvLyBUT0RPOiBpZiB0aGUgbm9kZSBzdHJlYW0gcmV0dXJucyBhbiBlcnJvciBmcm9tICdlbmQnLCBzaG91bGQgd2U6XG5cdFx0XHQvLyAxLiByZWplY3QgdGhpcy5jbG9zZSB3aXRoIHRoZSBlcnJvcj8gKGltcGxlbWVudGVkKVxuXHRcdFx0Ly8gMi4gcHV0ICd0aGlzJyBpbnRvIGFuIGVycm9yIHN0YXRlPyAodGhpcy5faGFuZGxlRXJyb3IpXG5cdFx0XHR0aGlzLl9ub2RlU3RyZWFtLmVuZChudWxsLCBudWxsLCAoZXJyb3I6IEVycm9yKSA9PiB7XG5cdFx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdHN0YXJ0KCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGlmICh0aGlzLl9pc0Nsb3NlZCkge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignU3RyZWFtIGlzIGNsb3NlZCcpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblxuXHR3cml0ZShjaHVuazogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0aWYgKHRoaXMuX2lzQ2xvc2VkKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdTdHJlYW0gaXMgY2xvc2VkJykpO1xuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR0aGlzLl9yZWplY3RXcml0ZVByb21pc2UgPSByZWplY3Q7XG5cblx0XHRcdHRoaXMuX25vZGVTdHJlYW0ud3JpdGUoY2h1bmssIHRoaXMuX2VuY29kaW5nLCAoZXJyb3I/OiBFcnJvcikgPT4ge1xuXHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHR0aGlzLl9oYW5kbGVFcnJvcihlcnJvcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fcmVqZWN0V3JpdGVQcm9taXNlID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==