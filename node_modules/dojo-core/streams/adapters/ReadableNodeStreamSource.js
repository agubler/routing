(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '../../Promise'], factory);
    }
})(function (require, exports) {
    "use strict";
    var Promise_1 = require('../../Promise');
    var ReadableNodeStreamSource = (function () {
        function ReadableNodeStreamSource(nodeStream) {
            ;
            this._isClosed = false;
            this._nodeStream = nodeStream;
            // TODO: remove <any> when typedef is fixed to include 'isPaused'
            this._shouldResume = !this._nodeStream.isPaused();
            if (this._shouldResume) {
                // put stream in paused mode so it behaves as a pull source, rather than a push source
                this._nodeStream.pause();
            }
        }
        // Perform internal close logic
        ReadableNodeStreamSource.prototype._close = function () {
            this._isClosed = true;
            this._removeListeners();
            this._nodeStream.unpipe();
            if (this._shouldResume) {
                this._nodeStream.resume();
            }
        };
        // Handle external request to close
        ReadableNodeStreamSource.prototype._handleClose = function () {
            this._close();
            this._controller.close();
        };
        ReadableNodeStreamSource.prototype._handleError = function (error) {
            this._close();
            this._controller.error(error);
        };
        ReadableNodeStreamSource.prototype._removeListeners = function () {
            this._nodeStream.removeListener('close', this._onClose);
            this._nodeStream.removeListener('end', this._onClose);
            this._nodeStream.removeListener('error', this._onError);
        };
        ReadableNodeStreamSource.prototype.cancel = function (reason) {
            this._handleClose();
            return Promise_1.default.resolve();
        };
        ReadableNodeStreamSource.prototype.pull = function (controller) {
            if (this._isClosed) {
                return Promise_1.default.reject(new Error('Stream is closed'));
            }
            var chunk = this._nodeStream.read();
            if (chunk === null) {
                this._handleClose();
            }
            else {
                controller.enqueue(chunk);
            }
            return Promise_1.default.resolve();
        };
        ReadableNodeStreamSource.prototype.start = function (controller) {
            this._controller = controller;
            this._onClose = this._handleClose.bind(this);
            this._onError = this._handleError.bind(this);
            this._nodeStream.on('close', this._onClose);
            this._nodeStream.on('end', this._onClose);
            this._nodeStream.on('error', this._onError);
            return Promise_1.default.resolve();
        };
        return ReadableNodeStreamSource;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ReadableNodeStreamSource;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVhZGFibGVOb2RlU3RyZWFtU291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cmVhbXMvYWRhcHRlcnMvUmVhZGFibGVOb2RlU3RyZWFtU291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztJQUFBLHdCQUFvQixlQUFlLENBQUMsQ0FBQTtJQU9wQztRQVFDLGtDQUFZLFVBQW9CO1lBQUcsQ0FBQztZQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztZQUU5QixpRUFBaUU7WUFDakUsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFRLElBQUksQ0FBQyxXQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFMUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLHNGQUFzRjtnQkFDdEYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMxQixDQUFDO1FBQ0YsQ0FBQztRQUVELCtCQUErQjtRQUNyQix5Q0FBTSxHQUFoQjtZQUNDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7WUFFMUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDM0IsQ0FBQztRQUNGLENBQUM7UUFFRCxtQ0FBbUM7UUFDekIsK0NBQVksR0FBdEI7WUFDQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzFCLENBQUM7UUFFUywrQ0FBWSxHQUF0QixVQUF1QixLQUFZO1lBQ2xDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLENBQUM7UUFFUyxtREFBZ0IsR0FBMUI7WUFDQyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBRUQseUNBQU0sR0FBTixVQUFPLE1BQVk7WUFDbEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBRXBCLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzFCLENBQUM7UUFFRCx1Q0FBSSxHQUFKLFVBQUssVUFBb0Q7WUFDeEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7WUFDdEQsQ0FBQztZQUVELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFdEMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNyQixDQUFDO1lBQ0QsSUFBSSxDQUFDLENBQUM7Z0JBQ0wsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzQixDQUFDO1lBRUQsTUFBTSxDQUFDLGlCQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDMUIsQ0FBQztRQUVELHdDQUFLLEdBQUwsVUFBTSxVQUFvRDtZQUN6RCxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztZQUM5QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFN0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFNUMsTUFBTSxDQUFDLGlCQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDMUIsQ0FBQztRQUNGLCtCQUFDO0lBQUQsQ0FBQyxBQW5GRCxJQW1GQztJQW5GRDs4Q0FtRkMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9taXNlIGZyb20gJy4uLy4uL1Byb21pc2UnO1xuaW1wb3J0IHsgU291cmNlIH0gZnJvbSAnLi4vUmVhZGFibGVTdHJlYW0nO1xuaW1wb3J0IFJlYWRhYmxlU3RyZWFtQ29udHJvbGxlciBmcm9tICcuLi9SZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXInO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuXG5leHBvcnQgdHlwZSBOb2RlU291cmNlVHlwZSA9IEJ1ZmZlciB8IHN0cmluZztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhZGFibGVOb2RlU3RyZWFtU291cmNlIGltcGxlbWVudHMgU291cmNlPE5vZGVTb3VyY2VUeXBlPiB7XG5cdHByb3RlY3RlZCBfY29udHJvbGxlcjogUmVhZGFibGVTdHJlYW1Db250cm9sbGVyPE5vZGVTb3VyY2VUeXBlPjtcblx0cHJvdGVjdGVkIF9pc0Nsb3NlZDogYm9vbGVhbjtcblx0cHJvdGVjdGVkIF9vbkNsb3NlOiAoKSA9PiB2b2lkO1xuXHRwcm90ZWN0ZWQgX29uRXJyb3I6IChlcnJvcjogRXJyb3IpID0+IHZvaWQ7XG5cdHByb3RlY3RlZCBfbm9kZVN0cmVhbTogUmVhZGFibGU7XG5cdHByb3RlY3RlZCBfc2hvdWxkUmVzdW1lOiBib29sZWFuO1xuXG5cdGNvbnN0cnVjdG9yKG5vZGVTdHJlYW06IFJlYWRhYmxlKSB7O1xuXHRcdHRoaXMuX2lzQ2xvc2VkID0gZmFsc2U7XG5cdFx0dGhpcy5fbm9kZVN0cmVhbSA9IG5vZGVTdHJlYW07XG5cblx0XHQvLyBUT0RPOiByZW1vdmUgPGFueT4gd2hlbiB0eXBlZGVmIGlzIGZpeGVkIHRvIGluY2x1ZGUgJ2lzUGF1c2VkJ1xuXHRcdHRoaXMuX3Nob3VsZFJlc3VtZSA9ICEoPGFueT4gdGhpcy5fbm9kZVN0cmVhbSkuaXNQYXVzZWQoKTtcblxuXHRcdGlmICh0aGlzLl9zaG91bGRSZXN1bWUpIHtcblx0XHRcdC8vIHB1dCBzdHJlYW0gaW4gcGF1c2VkIG1vZGUgc28gaXQgYmVoYXZlcyBhcyBhIHB1bGwgc291cmNlLCByYXRoZXIgdGhhbiBhIHB1c2ggc291cmNlXG5cdFx0XHR0aGlzLl9ub2RlU3RyZWFtLnBhdXNlKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUGVyZm9ybSBpbnRlcm5hbCBjbG9zZSBsb2dpY1xuXHRwcm90ZWN0ZWQgX2Nsb3NlKCk6IHZvaWQge1xuXHRcdHRoaXMuX2lzQ2xvc2VkID0gdHJ1ZTtcblx0XHR0aGlzLl9yZW1vdmVMaXN0ZW5lcnMoKTtcblx0XHR0aGlzLl9ub2RlU3RyZWFtLnVucGlwZSgpO1xuXG5cdFx0aWYgKHRoaXMuX3Nob3VsZFJlc3VtZSkge1xuXHRcdFx0dGhpcy5fbm9kZVN0cmVhbS5yZXN1bWUoKTtcblx0XHR9XG5cdH1cblxuXHQvLyBIYW5kbGUgZXh0ZXJuYWwgcmVxdWVzdCB0byBjbG9zZVxuXHRwcm90ZWN0ZWQgX2hhbmRsZUNsb3NlKCk6IHZvaWQge1xuXHRcdHRoaXMuX2Nsb3NlKCk7XG5cdFx0dGhpcy5fY29udHJvbGxlci5jbG9zZSgpO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9oYW5kbGVFcnJvcihlcnJvcjogRXJyb3IpOiB2b2lkIHtcblx0XHR0aGlzLl9jbG9zZSgpO1xuXHRcdHRoaXMuX2NvbnRyb2xsZXIuZXJyb3IoZXJyb3IpO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9yZW1vdmVMaXN0ZW5lcnMoKTogdm9pZCB7XG5cdFx0dGhpcy5fbm9kZVN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCB0aGlzLl9vbkNsb3NlKTtcblx0XHR0aGlzLl9ub2RlU3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB0aGlzLl9vbkNsb3NlKTtcblx0XHR0aGlzLl9ub2RlU3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIHRoaXMuX29uRXJyb3IpO1xuXHR9XG5cblx0Y2FuY2VsKHJlYXNvbj86IGFueSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRoaXMuX2hhbmRsZUNsb3NlKCk7XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblxuXHRwdWxsKGNvbnRyb2xsZXI6IFJlYWRhYmxlU3RyZWFtQ29udHJvbGxlcjxOb2RlU291cmNlVHlwZT4pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiAodGhpcy5faXNDbG9zZWQpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1N0cmVhbSBpcyBjbG9zZWQnKSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgY2h1bmsgPSB0aGlzLl9ub2RlU3RyZWFtLnJlYWQoKTtcblxuXHRcdGlmIChjaHVuayA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5faGFuZGxlQ2xvc2UoKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRjb250cm9sbGVyLmVucXVldWUoY2h1bmspO1xuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0fVxuXG5cdHN0YXJ0KGNvbnRyb2xsZXI6IFJlYWRhYmxlU3RyZWFtQ29udHJvbGxlcjxOb2RlU291cmNlVHlwZT4pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0aGlzLl9jb250cm9sbGVyID0gY29udHJvbGxlcjtcblx0XHR0aGlzLl9vbkNsb3NlID0gdGhpcy5faGFuZGxlQ2xvc2UuYmluZCh0aGlzKTtcblx0XHR0aGlzLl9vbkVycm9yID0gdGhpcy5faGFuZGxlRXJyb3IuYmluZCh0aGlzKTtcblxuXHRcdHRoaXMuX25vZGVTdHJlYW0ub24oJ2Nsb3NlJywgdGhpcy5fb25DbG9zZSk7XG5cdFx0dGhpcy5fbm9kZVN0cmVhbS5vbignZW5kJywgdGhpcy5fb25DbG9zZSk7XG5cdFx0dGhpcy5fbm9kZVN0cmVhbS5vbignZXJyb3InLCB0aGlzLl9vbkVycm9yKTtcblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0fVxufVxuIl19