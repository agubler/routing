var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '../Promise', './ReadableStream', './SeekableStreamReader'], factory);
    }
})(function (require, exports) {
    "use strict";
    var Promise_1 = require('../Promise');
    var ReadableStream_1 = require('./ReadableStream');
    var SeekableStreamReader_1 = require('./SeekableStreamReader');
    var SeekableStream = (function (_super) {
        __extends(SeekableStream, _super);
        /**
         * @param preventClose (default=true) Prevent the stream from closing when it reaches the end.
         * If true, the stream will not close when requestClose is called on the controller (which is typically done by the
         * source when it reaches its end). This allows for re-seeking in a stream that has already been read to the end.
         * The stream can be closed by calling ReadableStream#close.
         */
        function SeekableStream(underlyingSource, strategy, preventClose) {
            if (strategy === void 0) { strategy = {}; }
            if (preventClose === void 0) { preventClose = true; }
            _super.call(this, underlyingSource, strategy);
            this.preventClose = preventClose;
        }
        SeekableStream.prototype.getReader = function () {
            if (!this.readable || !this.seek) {
                throw new TypeError('Must be a SeekableStream instance');
            }
            return new SeekableStreamReader_1.default(this);
        };
        SeekableStream.prototype.requestClose = function () {
            if (!this.preventClose) {
                _super.prototype.requestClose.call(this);
            }
        };
        SeekableStream.prototype.seek = function (position) {
            var _this = this;
            if (this._underlyingSource.seek) {
                return this._underlyingSource.seek(this.controller, position);
            }
            else {
                if (this.reader && position < this.reader.currentPosition) {
                    return Promise_1.default.reject(new Error('Stream source is not seekable; cannot seek backwards'));
                }
                else {
                    var discardNext_1 = function () {
                        return _this.reader.read().then(function (result) {
                            if (result.done || _this.reader.currentPosition === position) {
                                return Promise_1.default.resolve(_this.reader.currentPosition);
                            }
                            else {
                                return discardNext_1();
                            }
                        });
                    };
                    return discardNext_1();
                }
            }
        };
        Object.defineProperty(SeekableStream.prototype, "strategy", {
            get: function () {
                return this._strategy;
            },
            enumerable: true,
            configurable: true
        });
        return SeekableStream;
    }(ReadableStream_1.default));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = SeekableStream;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vla2FibGVTdHJlYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RyZWFtcy9TZWVrYWJsZVN0cmVhbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUNBLHdCQUFvQixZQUFZLENBQUMsQ0FBQTtJQUNqQywrQkFBdUMsa0JBQWtCLENBQUMsQ0FBQTtJQUUxRCxxQ0FBaUMsd0JBQXdCLENBQUMsQ0FBQTtJQUUxRDtRQUErQyxrQ0FBaUI7UUFJL0Q7Ozs7O1dBS0c7UUFDSCx3QkFBWSxnQkFBMkIsRUFBRSxRQUEwQixFQUFFLFlBQTRCO1lBQXhELHdCQUEwQixHQUExQixhQUEwQjtZQUFFLDRCQUE0QixHQUE1QixtQkFBNEI7WUFDaEcsa0JBQU0sZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDbEMsQ0FBQztRQUVELGtDQUFTLEdBQVQ7WUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbEMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1lBQzFELENBQUM7WUFFRCxNQUFNLENBQUMsSUFBSSw4QkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxDQUFDO1FBRUQscUNBQVksR0FBWjtZQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLGdCQUFLLENBQUMsWUFBWSxXQUFFLENBQUM7WUFDdEIsQ0FBQztRQUNGLENBQUM7UUFFRCw2QkFBSSxHQUFKLFVBQUssUUFBZ0I7WUFBckIsaUJBdUJDO1lBdEJBLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQy9ELENBQUM7WUFDRCxJQUFJLENBQUMsQ0FBQztnQkFDTCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7b0JBQzNELE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFDLENBQUM7Z0JBQzFGLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLENBQUM7b0JBQ0wsSUFBSSxhQUFXLEdBQUc7d0JBQ2pCLE1BQU0sQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFDLE1BQXFCOzRCQUNwRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0NBQzdELE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDOzRCQUNyRCxDQUFDOzRCQUNELElBQUksQ0FBQyxDQUFDO2dDQUNMLE1BQU0sQ0FBQyxhQUFXLEVBQUUsQ0FBQzs0QkFDdEIsQ0FBQzt3QkFDRixDQUFDLENBQUMsQ0FBQztvQkFDSixDQUFDLENBQUM7b0JBRUYsTUFBTSxDQUFDLGFBQVcsRUFBRSxDQUFDO2dCQUN0QixDQUFDO1lBQ0YsQ0FBQztRQUNGLENBQUM7UUFFRCxzQkFBSSxvQ0FBUTtpQkFBWjtnQkFDQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUN2QixDQUFDOzs7V0FBQTtRQUNGLHFCQUFDO0lBQUQsQ0FBQyxBQTFERCxDQUErQyx3QkFBYyxHQTBENUQ7SUExREQ7b0NBMERDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdHJhdGVneSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICcuLi9Qcm9taXNlJztcbmltcG9ydCBSZWFkYWJsZVN0cmVhbSwgeyBTb3VyY2UgfSBmcm9tICcuL1JlYWRhYmxlU3RyZWFtJztcbmltcG9ydCB7IFJlYWRSZXN1bHQgfSBmcm9tICcuL1JlYWRhYmxlU3RyZWFtUmVhZGVyJztcbmltcG9ydCBTZWVrYWJsZVN0cmVhbVJlYWRlciBmcm9tICcuL1NlZWthYmxlU3RyZWFtUmVhZGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Vla2FibGVTdHJlYW08VD4gZXh0ZW5kcyBSZWFkYWJsZVN0cmVhbTxUPiB7XG5cdHByZXZlbnRDbG9zZTogYm9vbGVhbjtcblx0cmVhZGVyOiBTZWVrYWJsZVN0cmVhbVJlYWRlcjxUPjtcblxuXHQvKipcblx0ICogQHBhcmFtIHByZXZlbnRDbG9zZSAoZGVmYXVsdD10cnVlKSBQcmV2ZW50IHRoZSBzdHJlYW0gZnJvbSBjbG9zaW5nIHdoZW4gaXQgcmVhY2hlcyB0aGUgZW5kLlxuXHQgKiBJZiB0cnVlLCB0aGUgc3RyZWFtIHdpbGwgbm90IGNsb3NlIHdoZW4gcmVxdWVzdENsb3NlIGlzIGNhbGxlZCBvbiB0aGUgY29udHJvbGxlciAod2hpY2ggaXMgdHlwaWNhbGx5IGRvbmUgYnkgdGhlXG5cdCAqIHNvdXJjZSB3aGVuIGl0IHJlYWNoZXMgaXRzIGVuZCkuIFRoaXMgYWxsb3dzIGZvciByZS1zZWVraW5nIGluIGEgc3RyZWFtIHRoYXQgaGFzIGFscmVhZHkgYmVlbiByZWFkIHRvIHRoZSBlbmQuXG5cdCAqIFRoZSBzdHJlYW0gY2FuIGJlIGNsb3NlZCBieSBjYWxsaW5nIFJlYWRhYmxlU3RyZWFtI2Nsb3NlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IodW5kZXJseWluZ1NvdXJjZTogU291cmNlPFQ+LCBzdHJhdGVneTogU3RyYXRlZ3k8VD4gPSB7fSwgcHJldmVudENsb3NlOiBib29sZWFuID0gdHJ1ZSkge1xuXHRcdHN1cGVyKHVuZGVybHlpbmdTb3VyY2UsIHN0cmF0ZWd5KTtcblxuXHRcdHRoaXMucHJldmVudENsb3NlID0gcHJldmVudENsb3NlO1xuXHR9XG5cblx0Z2V0UmVhZGVyKCk6IFNlZWthYmxlU3RyZWFtUmVhZGVyPFQ+IHtcblx0XHRpZiAoIXRoaXMucmVhZGFibGUgfHwgIXRoaXMuc2Vlaykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignTXVzdCBiZSBhIFNlZWthYmxlU3RyZWFtIGluc3RhbmNlJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBTZWVrYWJsZVN0cmVhbVJlYWRlcih0aGlzKTtcblx0fVxuXG5cdHJlcXVlc3RDbG9zZSgpOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMucHJldmVudENsb3NlKSB7XG5cdFx0XHRzdXBlci5yZXF1ZXN0Q2xvc2UoKTtcblx0XHR9XG5cdH1cblxuXHRzZWVrKHBvc2l0aW9uOiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj4ge1xuXHRcdGlmICh0aGlzLl91bmRlcmx5aW5nU291cmNlLnNlZWspIHtcblx0XHRcdHJldHVybiB0aGlzLl91bmRlcmx5aW5nU291cmNlLnNlZWsodGhpcy5jb250cm9sbGVyLCBwb3NpdGlvbik7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aWYgKHRoaXMucmVhZGVyICYmIHBvc2l0aW9uIDwgdGhpcy5yZWFkZXIuY3VycmVudFBvc2l0aW9uKSB7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1N0cmVhbSBzb3VyY2UgaXMgbm90IHNlZWthYmxlOyBjYW5ub3Qgc2VlayBiYWNrd2FyZHMnKSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0bGV0IGRpc2NhcmROZXh0ID0gKCk6IFByb21pc2U8bnVtYmVyPiA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMucmVhZGVyLnJlYWQoKS50aGVuKChyZXN1bHQ6IFJlYWRSZXN1bHQ8VD4pID0+IHtcblx0XHRcdFx0XHRcdGlmIChyZXN1bHQuZG9uZSB8fCB0aGlzLnJlYWRlci5jdXJyZW50UG9zaXRpb24gPT09IHBvc2l0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5yZWFkZXIuY3VycmVudFBvc2l0aW9uKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZGlzY2FyZE5leHQoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRyZXR1cm4gZGlzY2FyZE5leHQoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZXQgc3RyYXRlZ3koKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3N0cmF0ZWd5O1xuXHR9XG59XG4iXX0=