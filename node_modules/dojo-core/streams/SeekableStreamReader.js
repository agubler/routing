var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '../Promise', './ReadableStreamReader'], factory);
    }
})(function (require, exports) {
    "use strict";
    var Promise_1 = require('../Promise');
    var ReadableStreamReader_1 = require('./ReadableStreamReader');
    var SeekableStreamReader = (function (_super) {
        __extends(SeekableStreamReader, _super);
        function SeekableStreamReader() {
            _super.apply(this, arguments);
            this._currentPosition = 0;
        }
        Object.defineProperty(SeekableStreamReader.prototype, "currentPosition", {
            get: function () {
                return this._currentPosition;
            },
            enumerable: true,
            configurable: true
        });
        SeekableStreamReader.prototype.read = function () {
            var _this = this;
            return _super.prototype.read.call(this).then(function (result) {
                if (!result.done) {
                    var chunkSize = 1;
                    try {
                        if (_this._ownerReadableStream.strategy && _this._ownerReadableStream.strategy.size) {
                            chunkSize = _this._ownerReadableStream.strategy.size(result.value);
                        }
                    }
                    catch (error) {
                        _this._ownerReadableStream.error(error);
                        return Promise_1.default.reject(error);
                    }
                    _this._currentPosition += chunkSize;
                }
                return Promise_1.default.resolve(result);
            }, function (error) {
                return Promise_1.default.reject(error);
            });
        };
        SeekableStreamReader.prototype.seek = function (position) {
            var _this = this;
            if (position === this._currentPosition) {
                return Promise_1.default.resolve(this._currentPosition);
            }
            if (position < this._currentPosition) {
                this._ownerReadableStream.queue.empty();
            }
            // Drain the queue of any items prior to the desired seek position
            while (position > this._currentPosition && this._ownerReadableStream.queue.length) {
                var chunkSize = 1;
                var chunk = this._ownerReadableStream.queue.dequeue();
                if (this._ownerReadableStream.strategy && this._ownerReadableStream.strategy.size) {
                    try {
                        chunkSize = this._ownerReadableStream.strategy.size(chunk);
                    }
                    catch (error) {
                        return Promise_1.default.reject(error);
                    }
                }
                this._currentPosition += chunkSize;
            }
            // If there's anything left in the queue, we don't need to seek in the source, we can read from the queue
            if (this._ownerReadableStream.queue.length) {
                return Promise_1.default.resolve(this._currentPosition);
            }
            return this._ownerReadableStream.seek(position).then(function (position) {
                _this._currentPosition = position;
                return Promise_1.default.resolve(position);
            }, function (error) {
                return Promise_1.default.reject(error);
            });
        };
        return SeekableStreamReader;
    }(ReadableStreamReader_1.default));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = SeekableStreamReader;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vla2FibGVTdHJlYW1SZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RyZWFtcy9TZWVrYWJsZVN0cmVhbVJlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFBLHdCQUFvQixZQUFZLENBQUMsQ0FBQTtJQUNqQyxxQ0FBaUQsd0JBQXdCLENBQUMsQ0FBQTtJQUcxRTtRQUFxRCx3Q0FBdUI7UUFBNUU7WUFBcUQsOEJBQXVCO1lBQ2pFLHFCQUFnQixHQUFXLENBQUMsQ0FBQztRQXVFeEMsQ0FBQztRQXBFQSxzQkFBSSxpREFBZTtpQkFBbkI7Z0JBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztZQUM5QixDQUFDOzs7V0FBQTtRQUVELG1DQUFJLEdBQUo7WUFBQSxpQkF1QkM7WUF0QkEsTUFBTSxDQUFDLGdCQUFLLENBQUMsSUFBSSxXQUFFLENBQUMsSUFBSSxDQUFDLFVBQUMsTUFBcUI7Z0JBQzlDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztvQkFFbEIsSUFBSSxDQUFDO3dCQUNKLEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLElBQUksS0FBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOzRCQUNuRixTQUFTLEdBQUcsS0FBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNuRSxDQUFDO29CQUNGLENBQ0E7b0JBQUEsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFDZCxLQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUV2QyxNQUFNLENBQUMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzlCLENBQUM7b0JBRUQsS0FBSSxDQUFDLGdCQUFnQixJQUFJLFNBQVMsQ0FBQztnQkFDcEMsQ0FBQztnQkFFRCxNQUFNLENBQUMsaUJBQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDaEMsQ0FBQyxFQUFFLFVBQVUsS0FBWTtnQkFDeEIsTUFBTSxDQUFDLGlCQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQztRQUVELG1DQUFJLEdBQUosVUFBSyxRQUFnQjtZQUFyQixpQkFzQ0M7WUFyQ0EsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUMvQyxDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDekMsQ0FBQztZQUVELGtFQUFrRTtZQUNsRSxPQUFPLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDbkYsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO2dCQUNsQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUV0RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDbkYsSUFBSSxDQUFDO3dCQUNKLFNBQVMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDNUQsQ0FDQTtvQkFBQSxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO3dCQUNkLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDOUIsQ0FBQztnQkFDRixDQUFDO2dCQUVELElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxTQUFTLENBQUM7WUFDcEMsQ0FBQztZQUVELHlHQUF5RztZQUN6RyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQzVDLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUMvQyxDQUFDO1lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsUUFBZ0I7Z0JBQ3JFLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7Z0JBRWpDLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsQyxDQUFDLEVBQUUsVUFBQyxLQUFZO2dCQUNmLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QixDQUFDLENBQUMsQ0FBQztRQUNKLENBQUM7UUFDRiwyQkFBQztJQUFELENBQUMsQUF4RUQsQ0FBcUQsOEJBQW9CLEdBd0V4RTtJQXhFRDswQ0F3RUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9taXNlIGZyb20gJy4uL1Byb21pc2UnO1xuaW1wb3J0IFJlYWRhYmxlU3RyZWFtUmVhZGVyLCB7IFJlYWRSZXN1bHQgfSBmcm9tICcuL1JlYWRhYmxlU3RyZWFtUmVhZGVyJztcbmltcG9ydCBTZWVrYWJsZVN0cmVhbSBmcm9tICcuL1NlZWthYmxlU3RyZWFtJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Vla2FibGVTdHJlYW1SZWFkZXI8VD4gZXh0ZW5kcyBSZWFkYWJsZVN0cmVhbVJlYWRlcjxUPiB7XG5cdHByb3RlY3RlZCBfY3VycmVudFBvc2l0aW9uOiBudW1iZXIgPSAwO1xuXHRwcm90ZWN0ZWQgX293bmVyUmVhZGFibGVTdHJlYW06IFNlZWthYmxlU3RyZWFtPFQ+O1xuXG5cdGdldCBjdXJyZW50UG9zaXRpb24oKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5fY3VycmVudFBvc2l0aW9uO1xuXHR9XG5cblx0cmVhZCgpOiBQcm9taXNlPFJlYWRSZXN1bHQ8VD4+IHtcblx0XHRyZXR1cm4gc3VwZXIucmVhZCgpLnRoZW4oKHJlc3VsdDogUmVhZFJlc3VsdDxUPikgPT4ge1xuXHRcdFx0aWYgKCFyZXN1bHQuZG9uZSkge1xuXHRcdFx0XHRsZXQgY2h1bmtTaXplID0gMTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGlmICh0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtLnN0cmF0ZWd5ICYmIHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0uc3RyYXRlZ3kuc2l6ZSkge1xuXHRcdFx0XHRcdFx0Y2h1bmtTaXplID0gdGhpcy5fb3duZXJSZWFkYWJsZVN0cmVhbS5zdHJhdGVneS5zaXplKHJlc3VsdC52YWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRcdHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0uZXJyb3IoZXJyb3IpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuX2N1cnJlbnRQb3NpdGlvbiArPSBjaHVua1NpemU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcblx0XHR9LCBmdW5jdGlvbiAoZXJyb3I6IEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuXHRcdH0pO1xuXHR9XG5cblx0c2Vlayhwb3NpdGlvbjogbnVtYmVyKTogUHJvbWlzZTxudW1iZXI+IHtcblx0XHRpZiAocG9zaXRpb24gPT09IHRoaXMuX2N1cnJlbnRQb3NpdGlvbikge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9jdXJyZW50UG9zaXRpb24pO1xuXHRcdH1cblxuXHRcdGlmIChwb3NpdGlvbiA8IHRoaXMuX2N1cnJlbnRQb3NpdGlvbikge1xuXHRcdFx0dGhpcy5fb3duZXJSZWFkYWJsZVN0cmVhbS5xdWV1ZS5lbXB0eSgpO1xuXHRcdH1cblxuXHRcdC8vIERyYWluIHRoZSBxdWV1ZSBvZiBhbnkgaXRlbXMgcHJpb3IgdG8gdGhlIGRlc2lyZWQgc2VlayBwb3NpdGlvblxuXHRcdHdoaWxlIChwb3NpdGlvbiA+IHRoaXMuX2N1cnJlbnRQb3NpdGlvbiAmJiB0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtLnF1ZXVlLmxlbmd0aCkge1xuXHRcdFx0bGV0IGNodW5rU2l6ZSA9IDE7XG5cdFx0XHRsZXQgY2h1bmsgPSB0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtLnF1ZXVlLmRlcXVldWUoKTtcblxuXHRcdFx0aWYgKHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0uc3RyYXRlZ3kgJiYgdGhpcy5fb3duZXJSZWFkYWJsZVN0cmVhbS5zdHJhdGVneS5zaXplKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Y2h1bmtTaXplID0gdGhpcy5fb3duZXJSZWFkYWJsZVN0cmVhbS5zdHJhdGVneS5zaXplKGNodW5rKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2N1cnJlbnRQb3NpdGlvbiArPSBjaHVua1NpemU7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUncyBhbnl0aGluZyBsZWZ0IGluIHRoZSBxdWV1ZSwgd2UgZG9uJ3QgbmVlZCB0byBzZWVrIGluIHRoZSBzb3VyY2UsIHdlIGNhbiByZWFkIGZyb20gdGhlIHF1ZXVlXG5cdFx0aWYgKHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0ucXVldWUubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2N1cnJlbnRQb3NpdGlvbik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0uc2Vlayhwb3NpdGlvbikudGhlbigocG9zaXRpb246IG51bWJlcikgPT4ge1xuXHRcdFx0dGhpcy5fY3VycmVudFBvc2l0aW9uID0gcG9zaXRpb247XG5cblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUocG9zaXRpb24pO1xuXHRcdH0sIChlcnJvcjogRXJyb3IpID0+IHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==