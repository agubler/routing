(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", './string', './Symbol'], factory);
    }
})(function (require, exports) {
    "use strict";
    var string_1 = require('./string');
    var Symbol_1 = require('./Symbol');
    var staticDone = { done: true, value: undefined };
    /**
     * A class that provides "shims" an iterator interface on array like
     * objects.
     */
    var ShimIterator = (function () {
        function ShimIterator(list) {
            this._nextIndex = -1;
            this._list = list;
        }
        ;
        /**
         * Return the next iteration result for the Iterator
         */
        ShimIterator.prototype.next = function () {
            if (!this._list) {
                return staticDone;
            }
            if (++this._nextIndex < this._list.length) {
                return {
                    done: false,
                    value: this._list[this._nextIndex]
                };
            }
            return staticDone;
        };
        ;
        ShimIterator.prototype[Symbol_1.default.iterator] = function () {
            return this;
        };
        return ShimIterator;
    }());
    exports.ShimIterator = ShimIterator;
    /**
     * A type guard for checking if something has an Iterable interface
     * @param value The value to type guard against
     */
    function isIterable(value) {
        return value && typeof value[Symbol_1.default.iterator] !== 'undefined';
    }
    exports.isIterable = isIterable;
    /**
     * A type guard for checking if something is ArrayLike
     * @param value The value to type guard against
     */
    function isArrayLike(value) {
        return value && typeof value.length !== 'undefined';
    }
    exports.isArrayLike = isArrayLike;
    /**
     * Returns the iterator for an object
     * @param iterable The iterable object to return the itertator for
     */
    function get(iterable) {
        if (isIterable(iterable)) {
            /* have to cast as any, because the assumed index is implicit any */
            return iterable[Symbol_1.default.iterator]();
        }
        else if (isArrayLike(iterable)) {
            return new ShimIterator(iterable);
        }
    }
    exports.get = get;
    ;
    /**
     * Shims the functionality of `for ... of` blocks
     */
    function forOf(iterable, callback, thisArg) {
        var broken = false;
        function doBreak() {
            broken = true;
        }
        /* We need to handle iteration of double byte strings properly */
        if (!isIterable(iterable) && typeof iterable === 'string') {
            var l = iterable.length;
            for (var i = 0; i < l; ++i) {
                var char = iterable[i];
                if ((i + 1) < l) {
                    var code = char.charCodeAt(0);
                    if ((code >= string_1.HIGH_SURROGATE_MIN) && (code <= string_1.HIGH_SURROGATE_MAX)) {
                        char += iterable[++i];
                    }
                }
                callback.call(thisArg, char, iterable, doBreak);
                if (broken) {
                    return;
                }
            }
        }
        else {
            var iterator = get(iterable);
            var result = iterator.next();
            while (!result.done) {
                callback.call(thisArg, result.value, iterable, doBreak);
                if (broken) {
                    return;
                }
                result = iterator.next();
            }
        }
    }
    exports.forOf = forOf;
});
//# sourceMappingURL=data:application/json;base64,