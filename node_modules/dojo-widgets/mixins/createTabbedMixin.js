(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'maquette/maquette', 'dojo-core/WeakMap', './createContainerMixin'], factory);
    }
})(function (require, exports) {
    "use strict";
    var maquette_1 = require('maquette/maquette');
    var WeakMap_1 = require('dojo-core/WeakMap');
    var createContainerMixin_1 = require('./createContainerMixin');
    /**
     * A utility function that sets the supplied tab as the active tab on the supplied tabbed mixin
     * @param tabbed The tabbed mixin to set the active child on
     * @param activeTab The tab to make active/visible
     */
    function setActiveTab(tabbed, activeTab) {
        if (activeTab.parent === tabbed) {
            tabbed.children.forEach(function (tab) {
                if (tab !== activeTab && tab.state.active) {
                    tab.setState({ active: false });
                }
            });
            if (!activeTab.state.active) {
                activeTab.setState({ active: true });
            }
        }
    }
    /**
     * Return the currently active tab, if no tab is active, the first tab will be made active
     * @param tabbed The tabbed mixin to return the active child for
     */
    function getActiveTab(tabbed) {
        var activeTab = tabbed.children.find(function (tab) { return tab.state.active; });
        if (!activeTab) {
            activeTab = tabbed.children.first();
        }
        if (activeTab) {
            setActiveTab(tabbed, activeTab);
        }
        return activeTab;
    }
    /**
     * A weakmap of tabs and their listeners
     */
    var tabListenersMap = new WeakMap_1.default();
    /**
     * A utility function that sets the listeners for a tab which are then passed in the generated VDom.  The function
     * returns a handle that can be used to clean up the listeners
     * @param tabbed The tabbed mixin that should be effected when the listeners fire
     * @param tab The tab that the listeners are referring to
     */
    function setTabListeners(tabbed, tab) {
        /* TODO: There is an edge case where if a child tab is moved from one tabbed panel to another without being destroyed */
        tabListenersMap.set(tab, {
            onclickTabListener: function (evt) {
                evt.preventDefault();
                setActiveTab(tabbed, tab);
                return true;
            },
            onclickTabCloseListener: function (evt) {
                evt.preventDefault();
                /* TODO: actually close the tab */
                console.log('close');
                return;
            }
        });
        return {
            destroy: function () {
                var tabListeners = tabListenersMap.get(tab);
                if (tabListeners) {
                    tabListenersMap.delete(tab);
                }
            }
        };
    }
    /**
     * Return (or initilize) the tab listeners for a tab
     * @param tabbed The tabbed mixin that the listerns refer to
     * @param tab The tab that the listeners should be retrieved for
     */
    function getTabListeners(tabbed, tab) {
        if (!tabListenersMap.has(tab)) {
            /* When the tab is destroyed, it will remove its listeners */
            tab.own(setTabListeners(tabbed, tab));
        }
        return tabListenersMap.get(tab);
    }
    var createTabbedMixin = createContainerMixin_1.default
        .mixin({
        mixin: {
            tagName: 'dojo-panel-mixin',
            tagNames: {
                tabBar: 'ul',
                tab: 'li'
            },
            get activeChild() {
                return getActiveTab(this);
            },
            set activeChild(value) {
                setActiveTab(this, value);
            },
            getChildrenNodes: function () {
                var tabbed = this;
                var activeTab = getActiveTab(tabbed);
                function getTabChildVNode(tab) {
                    var tabListeners = getTabListeners(tabbed, tab);
                    return [
                        maquette_1.h('div.tab-label', { onclick: tabListeners.onclickTabListener }, [tab.state.label]),
                        /* TODO: only show the close when the tab state is closable */
                        maquette_1.h('div.tab-close', { onclick: tabListeners.onclickTabCloseListener }, ['X'])
                    ];
                }
                /* We need to generate a set of VDom the represents the buttons */
                /* TODO: Allow the location of the tab bar to be set (top/left/bottom/right) */
                var tabs = [];
                var childrenNodes = [];
                tabbed.children.forEach(function (tab, key) {
                    if (tab === activeTab) {
                        var activeTabVNode = tab.render();
                        activeTabVNode.properties.classes['visible'] = true;
                        childrenNodes.push(activeTabVNode);
                        tabs.push(maquette_1.h(tabbed.tagNames.tab + '.active', { key: tab }, getTabChildVNode(tab)));
                    }
                    else {
                        /* TODO: Having trouble changing the classes on the subnodes, so once visible always visible,
                         * The only choice was to just omit non visible nodes from the VDom, though I am not sure
                         * this makes a lot of sense, because with a big render, it is a lot of DOM to add and remove
                         */
                        tabs.push(maquette_1.h(tabbed.tagNames.tab, { key: tab }, getTabChildVNode(tab)));
                    }
                });
                return [maquette_1.h(tabbed.tagNames.tabBar, tabs)].concat(childrenNodes);
            }
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createTabbedMixin;
});
//# sourceMappingURL=../_debug/mixins/createTabbedMixin.js.map