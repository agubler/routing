(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'dojo-compose/compose', 'dojo-core/WeakMap', 'dojo-core/lang', './createEvented'], factory);
    }
})(function (require, exports) {
    "use strict";
    var compose_1 = require('dojo-compose/compose');
    var WeakMap_1 = require('dojo-core/WeakMap');
    var lang_1 = require('dojo-core/lang');
    var createEvented_1 = require('./createEvented');
    var stateWeakMap = new WeakMap_1.default();
    function setStatefulState(stateful, value) {
        var state = lang_1.deepAssign(stateWeakMap.get(stateful), value);
        stateful.emit({
            type: 'statechange',
            state: state,
            target: stateful
        });
        return state;
    }
    var observedStateMap = new WeakMap_1.default();
    function unobserve(stateful) {
        var observedState = observedStateMap.get(stateful);
        if (observedState) {
            observedState.handle.destroy();
        }
    }
    var createStateful = compose_1.default({
        get state() {
            return stateWeakMap.get(this);
        },
        setState: function (value) {
            var stateful = this;
            var observedState = observedStateMap.get(stateful);
            if (observedState) {
                observedState.observable.patch(value, { id: observedState.id });
            }
            else {
                setStatefulState(stateful, value);
            }
        },
        observeState: function (id, observable) {
            var stateful = this;
            var observedState = observedStateMap.get(stateful);
            if (observedState) {
                if (observedState.id === id && observedState.observable === observable) {
                    return observedState.handle;
                }
                throw new Error('Already observing state.');
            }
            observedState = {
                id: id,
                observable: observable,
                subscription: observable.observe(id).subscribe(function (item) {
                    setStatefulState(stateful, item);
                }, function (err) {
                    stateful.emit({
                        type: 'error',
                        target: stateful,
                        error: err
                    });
                    unobserve(stateful);
                }, function () {
                    unobserve(stateful);
                }),
                handle: {
                    destroy: function () {
                        var observedState = observedStateMap.get(stateful);
                        if (observedState) {
                            observedState.subscription.unsubscribe();
                            observedStateMap.delete(stateful);
                        }
                    }
                }
            };
            observedStateMap.set(stateful, observedState);
            return observedState.handle;
        }
    }, function (instance, options) {
        var state = {};
        stateWeakMap.set(instance, state);
        if (options) {
            if (options.state) {
                instance.setState(options.state);
            }
            if (options.id && options.stateFrom) {
                instance.own(instance.observeState(options.id, options.stateFrom));
            }
            else if (options.id || options.stateFrom) {
                throw new TypeError('Factory requires options "id" and "stateFrom" to be supplied together.');
            }
        }
    })
        .mixin(createEvented_1.default);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createStateful;
});
//# sourceMappingURL=../_debug/mixins/createStateful.js.map