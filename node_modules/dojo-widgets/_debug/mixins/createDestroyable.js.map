{"version":3,"file":"createDestroyable.js","sourceRoot":"","sources":["createDestroyable.ts"],"names":[],"mappings":";;;;;;;;;IAAA,wBAAwC,sBAAsB,CAAC,CAAA;IAC/D,wBAAoB,mBAAmB,CAAC,CAAA;IAExC,wBAAoB,mBAAmB,CAAC,CAAA;IAExC,IAAM,cAAc,GAAG,IAAI,iBAAO,EAAyB,CAAC;IAE5D,IAAM,IAAI,GAAG,cAAa,MAAM,CAAC,iBAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAM,SAAS,GAAG;QACjB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAClD,CAAC,CAAC;IAiBF,uBAA8B,KAAU;QACvC,MAAM,CAAC,KAAK,IAAI,SAAS,IAAI,KAAK,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,UAAU,CAAC;IAC3E,CAAC;IAFe,qBAAa,gBAE5B,CAAA;IAED,IAAM,iBAAiB,GAAqC,iBAAO,CAAC;QACnE,GAAG,YAAC,MAAc;YACjB,IAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACzC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrB,MAAM,CAAC;gBACN,OAAO;oBACN,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;oBACxC,MAAM,CAAC,OAAO,EAAE,CAAC;gBAClB,CAAC;aACD,CAAC;QACH,CAAC;QACD,OAAO;YAAP,iBAUC;YATA,MAAM,CAAC,IAAI,iBAAO,CAAC,UAAC,OAAO;gBAC1B,cAAc,CAAC,GAAG,CAAC,KAAI,CAAC,CAAC,OAAO,CAAC,UAAC,MAAM;oBACvC,MAAM,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;gBAC9C,CAAC,CAAC,CAAC;gBACH,cAAc,CAAC,MAAM,CAAC,KAAI,CAAC,CAAC;gBAC5B,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,KAAI,CAAC,GAAG,GAAG,SAAS,CAAC;gBACrB,OAAO,CAAC,IAAI,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,EAAE,UAAC,QAAQ;QACX,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH;sBAAe,iBAAiB,CAAC","sourcesContent":["import compose, { ComposeFactory } from 'dojo-compose/compose';\nimport Promise from 'dojo-core/Promise';\nimport { Handle } from 'dojo-core/interfaces';\nimport WeakMap from 'dojo-core/WeakMap';\n\nconst handlesWeakMap = new WeakMap<Destroyable, Handle[]>();\n\nconst noop = function() { return Promise.resolve(false); };\nconst destroyed = function() {\n\tthrow new Error('Call made to destroyed method');\n};\n\nexport interface Destroyable {\n\t/**\n\t * Take a handle and \"own\" it, which ensures that its destroy\n\t * method is called when the owning object's destroy method is\n\t * called.\n\t * @param handle The handle to own\n\t */\n\town(handle: Handle): Handle;\n\n\t/**\n\t * Invoke destroy() on any owned handles\n\t */\n\tdestroy(): Promise<boolean>;\n}\n\nexport function isDestroyable(value: any): value is Destroyable {\n\treturn value && 'destroy' in value && typeof value.destroy === 'function';\n}\n\nconst createDestroyable: ComposeFactory<Destroyable, any> = compose({\n\town(handle: Handle): Handle {\n\t\tconst handles = handlesWeakMap.get(this);\n\t\thandles.push(handle);\n\t\treturn {\n\t\t\tdestroy() {\n\t\t\t\thandles.splice(handles.indexOf(handle));\n\t\t\t\thandle.destroy();\n\t\t\t}\n\t\t};\n\t},\n\tdestroy() {\n\t\treturn new Promise((resolve) => {\n\t\t\thandlesWeakMap.get(this).forEach((handle) => {\n\t\t\t\thandle && handle.destroy && handle.destroy();\n\t\t\t});\n\t\t\thandlesWeakMap.delete(this);\n\t\t\tthis.destroy = noop;\n\t\t\tthis.own = destroyed;\n\t\t\tresolve(true);\n\t\t});\n\t}\n}, (instance) => {\n\thandlesWeakMap.set(instance, []);\n});\n\nexport default createDestroyable;\n"]}