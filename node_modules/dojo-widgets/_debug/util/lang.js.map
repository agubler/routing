{"version":3,"file":"lang.js","sourceRoot":"","sources":["lang.ts"],"names":[],"mappings":";;;;;;;;;IAIA,kBAAqB,IAAmB,EAAE,IAAO,EAAE,QAAkB,EAAE,SAAa;QACnF,IAAI,GAAW,CAAC;QAChB,EAAE,CAAC,CAAC,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YAClC,GAAG,GAAG,QAAQ,CAAC;YACf,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;YAC3D,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;gBAC3B,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC7C,CAAC;QACF,CAAC;QACD,IAAI,CAAC,CAAC;YACL,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnB,KAAK,OAAO;oBACX,GAAG,GAAG,CAAC,CAAC;oBACR,KAAK,CAAC;gBACP,KAAK,MAAM;oBACV,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;oBACpD,KAAK,CAAC;gBACP,KAAK,QAAQ;oBACZ,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;oBAC9B,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAChB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;oBACzD,CAAC;oBACD,KAAK,CAAC;gBACP,KAAK,OAAO;oBACX,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBAClC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACf,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;oBACzD,CAAC;oBACD,KAAK,CAAC;gBACP;oBACC,MAAM,KAAK,CAAC,wBAAqB,QAAQ,OAAG,CAAC,CAAC;YAC/C,CAAC;QACF,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACZ,CAAC;IAED,sBAAgC,IAAa,EAAE,IAAO,EAAE,QAAkB,EAAE,SAAa;QACxF,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC;IAFe,oBAAY,eAE3B,CAAA;IAED,uBAAiC,KAAU,EAAE,IAAO,EAAE,QAAkB,EAAE,SAAa;QACtF,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QAClE,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAHe,qBAAa,gBAG5B,CAAA","sourcesContent":["import { List } from 'immutable/immutable';\n\nexport type Position = number | 'first' | 'last' | 'before' | 'after';\n\nfunction getIndex<T>(list: List<T> | T[], item: T, position: Position, reference?: T): number {\n\tlet idx: number;\n\tif (typeof position === 'number') {\n\t\tidx = position;\n\t\tconst size = Array.isArray(list) ? list.length : list.size;\n\t\tif (idx < 0 || idx > size) {\n\t\t\tthrow new Error('position is out of range');\n\t\t}\n\t}\n\telse {\n\t\tswitch (position) {\n\t\tcase 'first':\n\t\t\tidx = 0;\n\t\t\tbreak;\n\t\tcase 'last':\n\t\t\tidx = Array.isArray(list) ? list.length : list.size;\n\t\t\tbreak;\n\t\tcase 'before':\n\t\t\tidx = list.indexOf(reference);\n\t\t\tif (idx === -1) {\n\t\t\t\tthrow new Error('reference not contained in this list');\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'after':\n\t\t\tidx = list.indexOf(reference) + 1;\n\t\t\tif (idx === 0) {\n\t\t\t\tthrow new Error('reference not contained in this list');\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow Error(`Invalid position \"${position}\"`);\n\t\t}\n\t}\n\treturn idx;\n}\n\nexport function insertInList<T>(list: List<T>, item: T, position: Position, reference?: T): List<T> {\n\treturn list.insert(getIndex(list, item, position, reference), item);\n}\n\nexport function insertInArray<T>(array: T[], item: T, position: Position, reference?: T): T[] {\n\tarray.splice(getIndex(array, item, position, reference), 0, item);\n\treturn array;\n}\n"]}